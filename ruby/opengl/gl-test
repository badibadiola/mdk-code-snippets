#!/usr/bin/env ruby

require 'rubygems'
require 'opengl'

include Gl,Glu,Glut

def load_texture(file)
  $texture = glGenTextures (1)[0]

  f = File.new(file)
  data = f.read
  
  glEnable(GL_TEXTURE_2D)
  glBindTexture(GL_TEXTURE_2D, $texture)
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT)
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT)
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR)
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR)
  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 256, 256, 0, GL_RGB, GL_UNSIGNED_BYTE, data)
end

def on_expose 
  glClear(GL_COLOR_BUFFER_BIT)

  glBegin(GL_QUADS)
  glTexCoord2f(0,0)
  glVertex2f(-128, -128)
  glTexCoord2f(1,0)
  glVertex2f(128, -128)
  glTexCoord2f(1,1)
  glVertex2f(128, 128)
  glTexCoord2f(0,1)
  glVertex2f(-128, 128)
  glEnd

  glutSwapBuffers
end

def on_key(a, b, c) 
  glutDestroyWindow ($window)
end

glutInit
glutInitDisplayMode(GLUT_RGBA | GLUT_ALPHA | GLUT_DOUBLE)

glutInitWindowSize(640, 480)
$window = glutCreateWindow

glutDisplayFunc(method('on_expose').to_proc)
glutKeyboardFunc(method('on_key').to_proc)

glMatrixMode(GL_PROJECTION)
glLoadIdentity
glOrtho(-320, 320, 240, -240, -1000.0, 1000.0)

load_texture('texture.raw')

glEnable(GL_BLEND)
glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)

glutMainLoop



